
int configSc(struct Scenario * sc)
{
    config_t cfg;               // Returns all parameters in this structure 
    config_setting_t *setting;
    //const char *str1, *str2;
    const char * str;
    //int tmp,tmp2,tmp3,tmp4,tmp5;
    int tmpI;
    double tmpD;
    

    char *config_file_name = "config_scenario.txt";

    // Initialization 
    config_init(&cfg);

    // Read the file. If there is an error, report it and exit. 
    if (!config_read_file(&cfg, config_file_name))
    {
        printf("\n%s:%d - %s", config_error_file(&cfg), config_error_line(&cfg), config_error_text(&cfg));
        config_destroy(&cfg);
        return -1;
    }

    // Get the configuration file name. 
    if (config_lookup_string(&cfg, "filename", &str))
        printf("\nFile Type: %s", str);
    else
        printf("\nNo 'filename' setting in configuration file.");

    // Read the parameter group.
    setting = config_lookup(&cfg, "params");
    if (setting != NULL)
    {
        // Read the string
        /*
        if (config_setting_lookup_string(setting, "param1", &str))
        {
            printf("\nParam1: %s", str);
            //printf ("%d",threshold);
        }
        else
            printf("\nNo 'param1' setting in configuration file.");
        */
       
        // Read the integer
        if (config_setting_lookup_int(setting, "addNoise", &tmpI))
        {
            printf("\nAddnoise: %d", tmpI);
            sc->addNoise=tmpI;
        }
        else
            printf("\nNo AddNoise setting in configuration file.");
        
        // Read the integer
        if (config_setting_lookup_int(setting, "noiseSNR", &tmpI))
        {
            printf("\nNoise SNR: %d", tmpI);
            sc->noiseSNR=tmpI;
        }
        else
            printf("\nNo Noise SNR setting in configuration file.");
       
        // Read the integer
        if (config_setting_lookup_int(setting, "noiseDPhi", &tmpI))
        {
            sc->noiseDPhi=tmpI;
            printf("\nNoiseDPhi: %d", tmpI);
        }
        else
            printf("\nNo NoiseDPhi setting in configuration file.");

        // Read the integer
        if (config_setting_lookup_int(setting, "addInterference", &tmpI))
        {
            sc->addInterference=tmpI;
            printf("\naddInterference: %d", tmpI);
        }
        else
            printf("\nNo addInterference setting in configuration file.");

        // Read the integer
        if (config_setting_lookup_int(setting, "addFading", &tmpI))
        {
            sc->addFading=tmpI;
            printf("\naddFading: %d", tmpI);
        }
        else
            printf("\nNo addFading setting in configuration file.");

        if (config_setting_lookup_int(setting, "fadeK", &tmpI))
        {
            sc->addFading=tmpI;
            printf("\naddFading: %d", tmpI);
        }
        else
            printf("\nNo addFading setting in configuration file.");

        if (config_setting_lookup_int(setting, "fadeFd", &tmpI))
        {
            sc->addFading=tmpI;
            printf("\naddFading: %d", tmpI);
        }
        else
            printf("\nNo addFading setting in configuration file.");

        if (config_setting_lookup_int(setting, "fadeDPhi", &tmpI))
        {
            sc->addFading=tmpI;
            printf("\naddFading: %d", tmpI);
        }
        else
            printf("\nNo addFading setting in configuration file.");
    printf("\n");
    }

    config_destroy(&cfg);
    return 1;
}
